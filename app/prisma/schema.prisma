generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/chronos/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Models for NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  firstName     String?
  lastName      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  timezone      String    @default("Europe/Stockholm")

  accounts Account[]
  sessions Session[]
  events   Event[]
  categories Category[]
  importExportLogs ImportExportLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Calendar-specific models
model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  allDay      Boolean  @default(false)
  location    String?
  color       String?  @default("#3b82f6")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // User relationship
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Recurring event support
  isRecurring Boolean @default(false)
  recurringPatternId String?
  recurringPattern   RecurringPattern? @relation(fields: [recurringPatternId], references: [id])
  parentEventId      String?
  parentEvent        Event?  @relation("EventInstances", fields: [parentEventId], references: [id])
  instances          Event[] @relation("EventInstances")
  
  // Original date for recurring event exceptions
  originalDate DateTime?
  isException  Boolean @default(false)
  
  // Categories relationship
  categories EventCategory[]
  
  // Import/export tracking
  externalId String? // For tracking imported events
  source     String? // google, outlook, manual, etc.
  
  @@index([userId])
  @@index([startDate])
  @@index([endDate])
  @@index([isRecurring])
}

model RecurringPattern {
  id        String   @id @default(cuid())
  rrule     String   // RRULE string (RFC 5545)
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  events Event[]
}

model Category {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#6b7280")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // User relationship
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Events relationship
  events EventCategory[]
  
  @@unique([userId, name])
  @@index([userId])
}

model EventCategory {
  eventId    String
  categoryId String
  
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([eventId, categoryId])
}

model ImportExportLog {
  id          String   @id @default(cuid())
  type        String   // "import" or "export"
  filename    String
  eventsCount Int      @default(0)
  success     Boolean  @default(false)
  errorMessage String?
  createdAt   DateTime @default(now())
  
  // User relationship
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
}
